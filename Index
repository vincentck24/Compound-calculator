<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Online Compound Interest Calculator</title>
  <!-- Include Chart.js for plotting the graph -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f7f7f7;
      color: #333;
    }
    h2, h3 {
      text-align: center;
    }
    #calculator, #results {
      background-color: #fff;
      padding: 15px;
      margin: 10px auto;
      max-width: 800px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    label {
      display: inline-block;
      margin: 5px 0;
    }
    input[type="number"], select {
      padding: 5px;
      margin-left: 5px;
      width: 120px;
    }
    button {
      padding: 8px 12px;
      margin: 10px 0;
      cursor: pointer;
      border: none;
      background-color: #007BFF;
      color: #fff;
      border-radius: 4px;
    }
    button:hover {
      background-color: #0056b3;
    }
    #contributionsContainer label {
      margin-right: 10px;
    }
    #finalAmount {
      font-size: 1.1em;
      margin-bottom: 20px;
    }
    canvas {
      display: block;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <h2>Online Compound Interest Calculator</h2>
  <div id="calculator">
    <div>
      <label>
        Current Savings ($):
        <input type="number" id="currentSavings" value="1000" step="any">
      </label>
    </div>
    <div>
      <label>
        Annual Interest Rate (%):
        <input type="number" id="annualRate" value="5" step="any">
      </label>
    </div>
    <div>
      <label>
        Annual Inflation Rate (%):
        <input type="number" id="inflationRate" value="2" step="any">
      </label>
    </div>
    <div>
      <label>
        Compounding Frequency:
        <select id="compoundingFrequency">
          <option value="1">Annually</option>
          <option value="2">Semiannually</option>
          <option value="4">Quarterly</option>
          <option value="12" selected>Monthly</option>
        </select>
      </label>
    </div>
    <div>
      <label>
        Investment Duration (Years):
        <input type="number" id="years" value="10" min="1">
      </label>
    </div>
    <div>
      <button onclick="generateContributionInputs()">Generate Contribution Fields</button>
    </div>
    <div id="contributionsContainer">
      <!-- Contribution input fields will be generated here -->
    </div>
    <div>
      <button onclick="calculateCompound()">Calculate</button>
    </div>
  </div>
  
  <div id="results">
    <h3>Results</h3>
    <p id="finalAmount"></p>
    <canvas id="resultChart" width="700" height="400"></canvas>
  </div>
  
  <script>
    // Dynamically generate input fields for monthly contributions for each year.
    function generateContributionInputs(){
      const container = document.getElementById("contributionsContainer");
      container.innerHTML = ""; // clear previous inputs
      const years = parseInt(document.getElementById("years").value);
      for (let i = 1; i <= years; i++){
        // Create a label and input field for each year
        const label = document.createElement("label");
        label.innerHTML = "Monthly Contribution for Year " + i + ": ";
        const input = document.createElement("input");
        input.type = "number";
        input.id = "contrib" + i;
        input.value = "0";
        input.step = "any";
        label.appendChild(input);
        container.appendChild(label);
        container.appendChild(document.createElement("br"));
      }
    }
    
    // Calculate the compound interest based on user inputs and simulate month-by-month.
    function calculateCompound(){
      // Retrieve user inputs
      const currentSavings = parseFloat(document.getElementById("currentSavings").value);
      const annualRate = parseFloat(document.getElementById("annualRate").value) / 100;
      const inflationRate = parseFloat(document.getElementById("inflationRate").value) / 100;
      const durationYears = parseInt(document.getElementById("years").value);
      const compoundingFrequency = parseInt(document.getElementById("compoundingFrequency").value);
      
      // Calculate how many months pass between compounding events.
      const monthsBetweenCompound = 12 / compoundingFrequency;
      
      // Build an array of monthly contributions for each year.
      let contributions = [];
      for (let i = 1; i <= durationYears; i++){
        const val = parseFloat(document.getElementById("contrib" + i).value) || 0;
        contributions.push(val);
      }
      
      // Prepare simulation arrays for the graph.
      const totalMonths = durationYears * 12;
      let balance = currentSavings;
      let nominalData = [];
      let realData = [];
      let labels = [];
      
      // Run the simulation month by month.
      // Contributions are added at the beginning of each month,
      // and if the month qualifies for compounding, interest is applied.
      for (let m = 1; m <= totalMonths; m++){
        // Determine current year index (0-indexed)
        const yearIndex = Math.floor((m - 1) / 12);
        // Add monthly contribution for the current year.
        balance += contributions[yearIndex];
        // Check if the current month is a compounding period.
        if (m % monthsBetweenCompound === 0) {
          balance *= (1 + annualRate / compoundingFrequency);
        }
        // Record the data for graphing.
        nominalData.push(balance);
        // Calculate the inflation-adjusted (real) balance.
        const realBalance = balance / Math.pow((1 + inflationRate), m / 12);
        realData.push(realBalance);
        // Label the x-axis in years (rounded to 2 decimals).
        labels.push((m / 12).toFixed(2));
      }
      
      // Display final results (both nominal and inflation adjusted).
      const finalNominal = balance.toFixed(2);
      const finalReal = (balance / Math.pow((1 + inflationRate), durationYears)).toFixed(2);
      document.getElementById("finalAmount").innerHTML =
        "Final Nominal Amount: $" + finalNominal + "<br>" +
        "Final Inflation-Adjusted Amount: $" + finalReal;
      
      // Generate the graph using Chart.js.
      const ctx = document.getElementById('resultChart').getContext('2d');
      if(window.myChart instanceof Chart) {
        window.myChart.destroy();
      }
      window.myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Nominal Balance',
              data: nominalData,
              borderColor: 'blue',
              fill: false,
              tension: 0.1
            },
            {
              label: 'Real Balance',
              data: realData,
              borderColor: 'green',
              fill: false,
              tension: 0.1
            }
          ]
        },
        options: {
          scales: {
            x: {
              title: {
                display: true,
                text: 'Years'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Amount ($)'
              },
              beginAtZero: true
            }
          }
        }
      });
    }
  </script>
</body>
</html>
